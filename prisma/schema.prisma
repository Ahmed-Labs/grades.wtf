// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// datasource db {
//     provider = "sqlite"
//     // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }


generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("mongodb://USERNAME:PASSWORD@HOST/DATABASE?ssl=true&connectTimeoutMS=5000&maxPoolSize=50")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String  @unique
  emailVerified DateTime?
  password  String
  grades    Grade[]

//   syllabi   Syllabus[]
  accounts  Account[] 
  sessions  Session[]
}

model Course {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String  @unique
  code       String @unique
  grades    Grade[]
  syllabi   Syllabus[]
  instructors Instrucor[]
  upvotes   Int
  downvotes Int
}

model Vote {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  type      String 
  user      User    @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String @db.ObjectId
}

model Instrucor {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String @db.ObjectId
}

model Grade {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  letterGrade String
  gradeSubmittedAt DateTime?
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
}

model Syllabus {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  file       String
  course     Course  @relation(fields: [courseId], references: [id])
  courseId   String @db.ObjectId
}
//   submittedBy User   @relation(fields: [userId], references: [id])
//   userId     String @db.ObjectId

//add comments in the future
    // id String @id @default(auto()) @map("_id") @db.ObjectId
    // name String
    // code String  @unique
    // instructors 
    // syllabi
    // grades
    // upvotes
    // downvotes